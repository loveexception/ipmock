<?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper 
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.is.web.bmw.sql.PersonsMapper">
	<insert id="addPersons" parameterType="com.is.web.bmw.entity.sql.entity.Persons" useGeneratedKeys="true" keyProperty="persons.id">
		insert into <include refid="table" />(
			id
			<if test="persons.name!=null">,name</if>
			<if test="persons.password!=null">,password</if>
			<if test="persons.oldid!=null">,oldid</if>
			
		)values(
			#{persons.id}
			<if test="persons.name!=null">,#{persons.name}</if>
			<if test="persons.password!=null">,#{persons.password}</if>
			<if test="persons.oldid!=null">,#{persons.oldid}</if>
			
		)
	</insert>
	
<!--	<delete id="delPersonsByPrimaryKey" parameterType="Integer">
		delete from <include refid="table" />
		where 
			id=#{id}
	</delete> -->	
	
	<update id="updPersonsByPrimaryKey" parameterType="com.is.web.bmw.entity.sql.entity.Persons">
		update <include refid="table" />	TA
		<include refid="update" /> 
		where 
		id=#{persons.id}
	</update>
	

	<select id="getResultForSelectParamBySearch" parameterType="String" resultType="Map">
		select ${selectParam} TA
		<where> 
		<include refid="qualification" />
		</where>
		<include refid="groupbys" />
		<include refid="orderbys" />	
	</select>
	
	<select id="getResultForSelectParam" parameterType="String" resultType="Map">
		select ${selectParam} 
	</select>
	
	<select id="getPersonsByPrimaryKey" parameterType="com.is.web.bmw.entity.sql.entity.Persons" resultMap="personsMapper">
		<include refid="selectSql" />
		where 
					TA.id=#{persons.id}
	</select>
		
	<select id="getAllPersonsBySearch" parameterType="com.is.web.bmw.entity.sql.entity.Persons" resultMap="personsMapper">
		<include refid="selectSql" /> 
		<where> 
		<include refid="qualification" />
		</where>
		<include refid="groupbys" />
		<include refid="orderbys" />
	</select>

	<select id="getAllPersonsBySearchKey" parameterType="List" resultMap="personsMapper">
		<include refid="PersonsWithSearchKeyByPage" />
		<include refid="groupbys" />
		<include refid="orderbys" />
	</select>
	
	<select id="getAllPersonsByPage" parameterType="com.is.web.bmw.entity.sql.entity.Persons" resultMap="personsMapper">
		<include refid="selectSql" /> 
		<where> 
		<include refid="qualification" />
		</where>
		<include refid="groupbys" />
		<include refid="orderbys" />
		<include refid="pageLimit" />
	</select>
	
	<select id="getCountForPage" parameterType="com.is.web.bmw.entity.sql.entity.Persons" resultType="int">
		select count(id) from <include refid="table" /> TA 
		<where> 
		<include refid="qualification" />
		</where>
	</select>
	
	<select id="getAllPersonsWithSearchKeyByPage" parameterType="List" resultMap="personsMapper">
		<include refid="PersonsWithSearchKeyByPage" />
		<include refid="groupbys" />
		<include refid="orderbys" />
		<include refid="pageLimit" />
	</select>
	
	<select id="getCountWithSearchKeyForPage" parameterType="List" resultType="int">
		select count(id) from (
			<include refid="PersonsWithSearchKeyByPage" />
		) TSUM
	</select>
	
	<resultMap id="personsMapper" type="com.is.web.bmw.entity.sql.entity.Persons">
        <id property="id" column="id" />		<!-- id -->
        <result property="name" column="name" />		<!-- name -->
                <result property="password" column="password" />		<!-- password -->
                <result property="oldid" column="oldid" />		<!-- oldid -->
            </resultMap>
    
    <sql id="PersonsWithSearchKeyByPage">
		<foreach item="persons" index="index" collection="personsList" separator="UNION">
		<include refid="selectSql" /> 
		<where> 
			<include refid="qualification" />
		</where>
		</foreach>
	</sql>
	
	<sql id="table">
		t_persons
	</sql>

	<sql id="selectColum">
		<choose>
		<when test="persons.selectCols!=null and persons.selectCols.size>0">
		<foreach item="item" index="index" collection="persons.selectCols" open="" separator="," close="">${item}</foreach>
		</when>
		<otherwise>
			id,name,password,oldid
		</otherwise>
		</choose>
	</sql>
	
	<sql id="selectSql">
		select <include refid="selectColum" /> 
		from <include refid="table" /> TA
	</sql>
	
	<sql id="qualification">
	<if test="null!=persons">
<!-- 			<if test="persons.id!=null or 
					persons.compareCols.idBetweenType!=null or
    				persons.compareCols.idGreaterThan!=null or
    				persons.compareCols.idLessThan!=null"> and  
    				<choose>
    					<when test="persons.compareCols.idGreaterThan!=null
	        					and persons.compareCols.idLessThan!=null
	        					and persons.compareCols.idBetweenType!=null">
	        				<![CDATA[#{persons.compareCols.idGreaterThan} < TA.id ]]>
	        				<choose><when test="persons.compareCols.idBetweenType=='and'"> and </when><otherwise> or </otherwise></choose>
	        				<![CDATA[#{persons.compareCols.idLessThan} > TA.id]]>
	        			</when>
    					<when test="persons.compareCols.idGreaterThan!=null
	        					and persons.compareCols.idLessThan!=null">
	        				<choose>
	        				<when test="persons.compareCols.idGreaterThan==persons.compareCols.idLessThan">
	        					TA.id =#{persons.idGreaterThan}
	        				</when>
	        				<otherwise>
		        				<![CDATA[#{persons.compareCols.idGreaterThan} < TA.id ]]>
	        				<choose><when test="persons.compareCols.idGreaterThan>persons.compareCols.idLessThan"> or </when><otherwise> and </otherwise></choose>
	        				<![CDATA[#{persons.compareCols.idLessThan} > TA.id]]>
	        				</otherwise>
	        				</choose>
	        			</when>
    					<when test="persons.compareCols.idGreaterThan!=null">
	        				<![CDATA[#{persons.compareCols.idGreaterThan} < TA.id]]>
	        			</when>
    					<when test="persons.compareCols.idLessThan!=null">
	        				<![CDATA[#{persons.compareCols.idLessThan} > TA.id]]>
	        			</when>
	        			<otherwise>
	        				TA.id =#{persons.id}
	        			</otherwise>
    				</choose>
			</if>
			<if test="persons.compareCols.idMults!=null and persons.compareCols.idMults.length>0"> and  
	        		TA.id in <foreach item="item" index="index" collection="persons.compareCols.idMults" open="(" separator="," close=")">#{item}</foreach>
			</if>
			<if test="persons.compareCols.idStr!=null"> and  
	        		TA.id like concat('%','#{persons.compareCols.idStr}','%')
			</if>
 -->
		<if test="persons.name!=null and persons.name!=''"> and  
			<choose>
				<when test="persons.name.indexOf(' ')>=0">
        			<foreach item="item" index="index" collection="persons.name.split(' ')" open="(" separator=" " close=")"><if test="index>0"> or </if> TA.name like concat('%',${item},'%') </foreach>
        		</when>
        		<when test="persons.name.indexOf('+')>=0">
        			TA.name like concat('%','${persons.name.replace("+", "%")}','%')
        		</when>
        		<when test="persons.name.startsWith('!')">
        			TA.name !='${persons.name.replace("!", "")}'
        		</when>
				<when test="persons.name.startsWith('=')">
        			TA.name ='${persons.name.replace("=", "")}'
        		</when>
        		<otherwise>
        			TA.name like concat('%','${persons.name.replace("%", "")}','%')
        		</otherwise>
			</choose>
		</if>

		<if test="persons.password!=null and persons.password!=''"> and  
			<choose>
				<when test="persons.password.indexOf(' ')>=0">
        			<foreach item="item" index="index" collection="persons.password.split(' ')" open="(" separator=" " close=")"><if test="index>0"> or </if> TA.password like concat('%',${item},'%') </foreach>
        		</when>
        		<when test="persons.password.indexOf('+')>=0">
        			TA.password like concat('%','${persons.password.replace("+", "%")}','%')
        		</when>
        		<when test="persons.password.startsWith('!')">
        			TA.password !='${persons.password.replace("!", "")}'
        		</when>
				<when test="persons.password.startsWith('=')">
        			TA.password ='${persons.password.replace("=", "")}'
        		</when>
        		<otherwise>
        			TA.password like concat('%','${persons.password.replace("%", "")}','%')
        		</otherwise>
			</choose>
		</if>

		<if test="persons.oldid!=null and persons.oldid!=''"> and  
			<choose>
				<when test="persons.oldid.indexOf(' ')>=0">
        			<foreach item="item" index="index" collection="persons.oldid.split(' ')" open="(" separator=" " close=")"><if test="index>0"> or </if> TA.oldid like concat('%',${item},'%') </foreach>
        		</when>
        		<when test="persons.oldid.indexOf('+')>=0">
        			TA.oldid like concat('%','${persons.oldid.replace("+", "%")}','%')
        		</when>
        		<when test="persons.oldid.startsWith('!')">
        			TA.oldid !='${persons.oldid.replace("!", "")}'
        		</when>
				<when test="persons.oldid.startsWith('=')">
        			TA.oldid ='${persons.oldid.replace("=", "")}'
        		</when>
        		<otherwise>
        			TA.oldid like concat('%','${persons.oldid.replace("%", "")}','%')
        		</otherwise>
			</choose>
		</if>
	</if>
	
	<include refid="isNullColum" />
	</sql>
	
	<sql id="isNullColum">
		<if test="persons.isNullCols!=null and persons.isNullCols.size>0">
		<foreach item="item" index="index" collection="persons.isNullCols" open="" separator=" " close=""> and (${item} IS NULL || ${item}='')</foreach>
		</if>
	</sql>
	
	<sql id="update">
	<set>
		<!-- 主键不作为查询条件传入不更新,
		TA.id=#{persons.id}, 
		-->
		<if test="null!=persons.name"> 
			TA.name=#{persons.name}, 
		</if>
		<if test="null!=persons.password"> 
			TA.password=#{persons.password}, 
		</if>
		<if test="null!=persons.oldid"> 
			TA.oldid=#{persons.oldid}, 
		</if>
	</set>
	</sql>


	<sql id="orderbys">
		<if test="null!= persons and null!= persons.orderBys and persons.orderBys.size>0">
			order by
				${persons.orderBys.TABLEORDERBYSTR}
		</if>
	</sql>
	
	<sql id="groupbys">
		<if test="null!= persons and null!= persons.groupBys and persons.groupBys!=''">
			group by
				${persons.groupBys}
		</if>
	</sql>
	
	<!-- BEGIN 字典字段转换检索 -->
	<!-- END 字典字段转换检索 -->
	
	<sql id="startSql">
		select * from (
	</sql>

	<sql id="endSql">
		 ) b <include refid="pageLimit" />
	</sql>

	<sql id="pageLimit">
		<![CDATA[ limit ${startIndex},${endIndex}]]>
	</sql>

</mapper>